#include <signal.h>
#include <stdio.h>
#include <string.h>

#ifndef WIN32
#  include <unistd.h>
#else
#  include <process.h>
#  define snprintf sprintf_s
#endif

#include <mosquitto.h>
#include <mysql/mysql.h>
#include "cJSON.h"

#define db_host "localhost"
#define db_username "root"
#define db_password "mysql"
#define db_database "mqtt_data"
#define db_port 3306

//#define db_query "INSERT INTO temphumi_mysql2 (topic, payload,source) VALUES (?,?,?)"
#define db_query "INSERT INTO ph (id) VALUES (?)"
//#define db_query "INSERT INTO mqtt_mysql (topic, payload) VALUES (?,?)"


#define mqtt_host "localhost"
#define mqtt_port 1883

#define TOPICLEN  100
#define PAYLOADLEN 200

static int run = 1;
static MYSQL_STMT *stmt = NULL;

char msgtopic[TOPICLEN];
unsigned long msgtopic_len;
char msgpayload[PAYLOADLEN];
unsigned long msgpayload_len;



int msgsource;
int msgparent;
int msgtemp;
int msgvoltage;
int msgtemp_2;
int msghumidity;
int msgsensorX;
int msgsensorY;
int msgsensorZ;
unsigned long len = 0L;


void handle_signal(int s)
{
	run = 0;
}

void connect_callback(struct mosquitto *mosq, void *obj, int result)
{
}

void message_callback(struct mosquitto *mosq, void *obj, const struct mosquitto_message *message)
{
	cJSON* rootJsonObj;
	cJSON* itemJsonObj;

	msgsource=-1;
	msgparent=-1;
	msgtemp=-1;
	msgvoltage=-1;
	msgtemp_2=-1;
	msghumidity=-1;
	msgsensorX=-1;
	msgsensorY=-1;
	msgsensorZ=-1;

	strncpy(msgtopic, message->topic, TOPICLEN); /* string  */
    msgtopic_len= strlen(msgtopic);

	strncpy(msgpayload, message->payload, PAYLOADLEN); /* string  */
    msgpayload_len= strlen(msgpayload);

	printf("recv topic[%s] payload. /n", msgtopic);

	rootJsonObj = cJSON_Parse(msgpayload);
	if(NULL == rootJsonObj){
		fprintf(stderr, "Error: cJSON_Parse fail. \n");
		return;
	}else{
		printf("json parse succeed.\n");
	}

	//source
	itemJsonObj = cJSON_GetObjectItem(rootJsonObj, "source");
	if(itemJsonObj!=NULL){
		msgsource = itemJsonObj->valueint;
		printf("source=%ld. ", msgsource);
	}

	//parent
	itemJsonObj = cJSON_GetObjectItem(rootJsonObj, "parent");
	if(itemJsonObj!=NULL){
		msgparent = itemJsonObj->valueint;
	}

	//temp
	itemJsonObj = cJSON_GetObjectItem(rootJsonObj, "temp");
	if(itemJsonObj!=NULL){
		msgtemp = itemJsonObj->valueint;
		printf("msgtemp=%d. ", msgtemp);
	}

	//voltage
	itemJsonObj = cJSON_GetObjectItem(rootJsonObj, "voltage");
	if(itemJsonObj!=NULL){
		msgvoltage = itemJsonObj->valueint;
	}

	//temp_2
	itemJsonObj = cJSON_GetObjectItem(rootJsonObj, "temp_2");
	if(itemJsonObj!=NULL){
		msgtemp_2 = itemJsonObj->valueint;
		printf("msgtemp_2=%d. ", msgtemp_2);
	}

	//humidity
	itemJsonObj = cJSON_GetObjectItem(rootJsonObj, "humidity");
	if(itemJsonObj!=NULL){
		msghumidity = itemJsonObj->valueint;
		printf("msghumidity=%d. ", msghumidity);
	}

	//sensorX
	itemJsonObj = cJSON_GetObjectItem(rootJsonObj, "sensorX");
	if(itemJsonObj!=NULL){
		msgsensorX = itemJsonObj->valueint;
	}

	//sensorY
	itemJsonObj = cJSON_GetObjectItem(rootJsonObj, "sensorY");
	if(itemJsonObj!=NULL){
		msgsensorY = itemJsonObj->valueint;
	}

	//sensorZ
	itemJsonObj = cJSON_GetObjectItem(rootJsonObj, "sensorZ");
	if(itemJsonObj!=NULL){
		msgsensorZ = itemJsonObj->valueint;
	}


	//mysql_stmt_execute(stmt);

	/* Execute the INSERT statement - 1*/
	printf("start mysql_stmt_execute...\n");
    if (mysql_stmt_execute(stmt))
    {
        fprintf(stderr, " mysql_stmt_execute(), 1 failed\n");
        fprintf(stderr, " %s\n", mysql_stmt_error(stmt));
    }

	 printf("mysql_stmt_execute succeed. \n");

	 cJSON_Delete(rootJsonObj);
	 printf("cJSON_Delete succeed. \n");
}

int main(int argc, char *argv[])
{
	MYSQL *connection;
	my_bool reconnect = true;
	char clientid[24];

	struct mosquitto *mosq;
	int rc = 0;

	signal(SIGINT, handle_signal);
	signal(SIGTERM, handle_signal);

	mysql_library_init(0, NULL, NULL);
	mosquitto_lib_init();

	connection = mysql_init(NULL);

	if(connection){
		mysql_options(connection, MYSQL_OPT_RECONNECT, &reconnect);

		connection = mysql_real_connect(connection, db_host, db_username, db_password, db_database, db_port, NULL, 0);

		if(connection){
			stmt = mysql_stmt_init(connection);

			mysql_stmt_prepare(stmt, db_query, strlen(db_query));

			MYSQL_BIND bind[11];
			//MYSQL_BIND bind[3];

			memset(bind, 0, sizeof(bind));

			//Topic
			bind[0].buffer_type = MYSQL_TYPE_STRING;
			bind[0].buffer = (char*)msgtopic;
			bind[0].buffer_length = TOPICLEN;
			bind[0].is_null= 0;
		    bind[0].length= &msgtopic_len;

			//Payload
			bind[1].buffer_type = MYSQL_TYPE_STRING;
			bind[1].buffer = (char*)msgpayload;
			bind[1].buffer_length = PAYLOADLEN;
			bind[1].is_null= 0;
		    bind[1].length= &msgpayload_len;

			//Source
			bind[2].buffer_type = MYSQL_TYPE_LONG;
			bind[2].buffer = (char*)&msgsource;
			bind[2].is_null= 0;
		    bind[2].length= 0;


 			//Parent
			bind[3].buffer_type = MYSQL_TYPE_LONG;
			bind[3].buffer = (char*)&msgparent;
			bind[3].is_null= 0;
		    bind[3].length= 0;

			 //temp
			bind[4].buffer_type = MYSQL_TYPE_LONG;
			bind[4].buffer = (char*)&msgtemp;
			bind[4].is_null= 0;
		    bind[4].length= 0;

			//voltage
			bind[5].buffer_type = MYSQL_TYPE_LONG;
			bind[5].buffer = (int*)&msgvoltage;
			bind[5].is_null= 0;
		    bind[5].length= 0;

			 //temp_2
			bind[6].buffer_type = MYSQL_TYPE_LONG;
			bind[6].buffer = (char*)&msgtemp_2;
			bind[6].is_null= 0;
		    bind[6].length= 0;

			//humidity
			bind[7].buffer_type = MYSQL_TYPE_LONG;
			bind[7].buffer = (char*)&msghumidity;
			bind[7].is_null= 0;
		    bind[7].length= 0;

			//sensorX
			bind[8].buffer_type = MYSQL_TYPE_LONG;
			bind[8].buffer = (char*)&msgsensorX;
			bind[8].is_null=0;
		    bind[8].length= 0;

			//sensorY
			bind[9].buffer_type = MYSQL_TYPE_LONG;
			bind[9].buffer = (char*)&msgsensorY;
			bind[9].is_null= 0;
		    bind[9].length= 0;

			//sensorZ
			bind[10].buffer_type = MYSQL_TYPE_LONG;
			bind[10].buffer = (char*)&msgsensorZ;
			bind[10].is_null= 0;
		    bind[10].length= 0;


			/* Bind the buffers */
		    if (mysql_stmt_bind_param(stmt, bind))
		    {
		        fprintf(stderr, " mysql_stmt_bind_param() failed\n");
		        fprintf(stderr, " %s\n", mysql_stmt_error(stmt));
		    }

			memset(clientid, 0, 24);
			snprintf(clientid, 23, "mysql_log_%d", getpid());
			mosq = mosquitto_new(clientid, true, connection);
			if(mosq){
				mosquitto_connect_callback_set(mosq, connect_callback);
				mosquitto_message_callback_set(mosq, message_callback);


			    rc = mosquitto_connect(mosq, mqtt_host, mqtt_port, 60);

				mosquitto_subscribe(mosq, NULL, "#", 0);

				while(run){
					rc = mosquitto_loop(mosq, -1, 1);
					if(run && rc){
						sleep(20);
						mosquitto_reconnect(mosq);
					}
				}
				mosquitto_destroy(mosq);
			}
			mysql_stmt_close(stmt);

			mysql_close(connection);
		}else{
			fprintf(stderr, "Error: Unable to connect to database.\n");
			printf("%s\n", mysql_error(connection));
			rc = 1;
		}
	}else{
		fprintf(stderr, "Error: Unable to start mysql.\n");
		rc = 1;
	}

	mysql_library_end();
	mosquitto_lib_cleanup();

	return rc;
}


